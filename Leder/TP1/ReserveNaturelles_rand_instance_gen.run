/*
In this file, we will generate some random instances for the natural reserves problem.
..We will focus on the following parameters:
1. n=m := number of rows/columns in the grid 
2. p=q := number of species of each type
3. rho_spec = p/n := proportion of the species with respect to the number of zones
4. rho := support density/proportion of the zones i with p_i,k > 0 for all k
*/

reset;

param zones_idx_max;		# number of values of n,m
param alpha_idx_max;		# number of values of alpha (fixed, see the .dat file)
param instance_idx_max;		# number of instances for each 5-uplet (n,m,k,rho,alpha)

set species_density;		# values for k/(n*m)
set supp_prob_density;		# values for rho

param c_min;		# cost min (fixed)
param c_max;		# cost min (fixed)
param alpha_values{1..alpha_idx_max,1..2};

data ReserveNaturelles_rand_instance_gen.dat;

param dataName symbolic default "random_instances/ReserveNaturelles_ampl_rand";
param dataNameFull symbolic default "";


param n default 0;
param m default 0;
param p default 0;
param q default 0;

param supp_size default 0;		# number of cells such that p_i,k > 0 for all k
param rn default 0; 			# random number
param row default 0; 			# row_index (i)
param column default 0;			# column_index (i)
#param proba_{1..p+q,1..n,1..m} default 0; # survival probability in a zone if the zone is protected
param proba_{1..64,1..25,1..25} default 0;

# target survival probability for the first and second half of the species

printf "zones_idx_max = %d\n", zones_idx_max;
printf "alpha_idx_max = %d\n", alpha_idx_max;
printf "instance_idx_max = %d\n\n", instance_idx_max;

for{size in 1..zones_idx_max}{	# 5*3*3*4*5
	let n := size*5;
	let m := size*5;
	printf "zones_idx=%d/%d, n=m=%d\n", size, zones_idx_max, n;
	for{rho_k in species_density}{
		let p := ceil(rho_k*n*m/4);
		let q := ceil(rho_k*n*m/4);
		printf "p=q=%d\n", p;
		for{rho_prob in supp_prob_density}{
			let supp_size := ceil(rho_prob*n*m);
			for{alpha_scnr in 1..alpha_idx_max}{
				for{inst in 1..instance_idx_max}{
					let dataNameFull := (dataName) & "_nm" & (n) & "_pq" & (p) 
										& "_rhop" & (rho_prob) & "_alpha" & (alpha_scnr)
										& "_inst" & (inst) & ".dat";
					printf "\nparam n := %d;", n  > (dataNameFull);
					printf "\nparam m := %d;", m  > (dataNameFull);
					printf "\nparam p := %d;", p  > (dataNameFull);
					printf "\nparam q := %d;", q  > (dataNameFull);
					
					
					#printf "\nparam alpha := %d;", alpha_scenario  > (dataNameFull);	# TODO: remove
					#printf "\nparam inst := %d;", inst  > (dataNameFull); # TODO: remove
					
					## proba
					
					for{sp in 1..p+q}{
						for{i in 1..n}{
							for{j in 1..m}{
								let proba_[sp,i,j] := 0.0;
							}
						}
					}
					
					printf "\n\nparam proba :=\n"  > (dataNameFull);
					
					for{sp in 1..p+q}{
						for{cell in 1..supp_size}{
							
							let rn := floor(Uniform(0,n*m))+1;	# generate randomly the position of the cell in the list of cells with p_i,k > 0
						 	let row := floor((rn-1)/m) + 1; # rn = (i-1)*m + j
						 	let column := rn - (row-1)*m;
						 	
						 	# add the probability only once
							/*
							if proba_[sp,row,column] == 0 then
								
							end
							*/
							
							let proba_[sp,row,column] := (floor(Uniform(0,5))+1)/10;	
						
						}
					}
					
					for{sp in 1..p+q}{
						for{i in 1..n}{
							for{j in 1..m}{
								if proba_[sp,i,j] > 0.0 then {
									printf "%d %d %d %.1f\n", sp, i, j, 
						 		 	proba_[sp,i,j] > (dataNameFull);	# random prob
						 		 }
							}
						}
					}
					
					printf ";" > (dataNameFull);
					
					## alpha
					
					printf "\n\nparam alpha :=\n" > (dataNameFull);
					
					for{sp in 1..p}{
						printf "%d %.1f\n", sp, alpha_values[alpha_scnr,1] > (dataNameFull);
					}
					for{sp in p+1..p+q}{
						printf "%d %.1f\n", sp, alpha_values[alpha_scnr,2] > (dataNameFull);
					}
					
					## cost
					
					printf ";\n\nparam c : " > (dataNameFull);
					
					for{m_idx in 1..m}{
						printf "%d ", m_idx > (dataNameFull);
					}
					
					printf ":=\n" > (dataNameFull);
					
					for{n_idx in 1..n}{
						printf "%d", n_idx > (dataNameFull);
						for{m_idx in 1..m}{
							let rn := floor(Uniform(c_min-1, c_max))+1;	# random cost
							printf " %d", rn > (dataNameFull);
						}
						printf "\n" > (dataNameFull);
					}
					
					printf ";" > (dataNameFull);
					
					# close the file to avoid overflow
					close (dataNameFull);
				}
			}
		}
	}
}
